import logging
import random
import string
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text

from states import PromoStates
from db import init_db, save_user

API_TOKEN = "7879820560:AAFckNCfRBBJuE_RpfQkhySItt7ACM_y2Lk"
MANAGER_ID = 7657798402

logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a", format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

# –•—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ª—É—á–∏–≤—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥
issued_promos = set()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥ /start
start_kb = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="get_promo"),
    InlineKeyboardButton("–°–∞–π—Ç", url="https://cnbridge.ru/"),
    InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url="tg://user?id=7657798402")
)

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer(
        "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–∞–Ω–¥–∞ CN Bridge! üëãüèª\n\n"
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –±–æ–ª–µ–µ 3-—Ö –ª–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é –∏ —Å—Ç—Ä–∞–Ω—ã –°–ù–ì.\n\n"
        "–ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –ª–æ–≥–∏—Å—Ç–∏–∫–∏ ‚Äî –æ—Ç –ø–æ–∏—Å–∫–∞ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –í–∞—à —Å–∫–ª–∞–¥.",
        reply_markup=start_kb
    )

@dp.message_handler(commands=["cancel"], state="*")
async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@dp.callback_query_handler(Text(equals="get_promo"))
async def get_promo_start(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    if user_id in issued_promos:
        await call.message.answer(
            "‚ùó–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–µ–ª—å–∑—è.",
            reply_markup=start_kb
        )
        await call.answer()
        return

    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await PromoStates.waiting_for_name.set()
    await call.answer()

@dp.message_handler(state=PromoStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await PromoStates.waiting_for_phone.set()

@dp.message_handler(state=PromoStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    digits = [c for c in phone if c.isdigit()]
    if len(digits) < 10:
        await message.reply("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(phone=phone)

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="generate_promo")
    )
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb)

@dp.callback_query_handler(Text(equals="generate_promo"), state="*")
async def generate_promo(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id

    if user_id in issued_promos:
        await call.message.answer("‚ùó–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –Ω–µ–ª—å–∑—è.", reply_markup=start_kb)
        await call.answer()
        return

    data = await state.get_data()
    name = data.get("name")
    phone = data.get("phone")
    code = f"CNB-{''.join(random.choices(string.ascii_uppercase + string.digits, k=4))}"

    save_user(name, phone, code)
    issued_promos.add(user_id)

    back_kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    )

    await call.message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥ –≥–æ—Ç–æ–≤! ü•≥\n\n"
        f"<b>–ù–æ–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞:</b> <code>{code}</code>\n\n"
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –Ω–∞ –ø–µ—Ä–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π CN Bridge ‚Äî "
        "–¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∑–æ–≤–∏—Ç–µ –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É @ripsat –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–∞—Å: https://cnbridge.ru/",
        reply_markup=back_kb
    )

    await bot.send_message(
        chat_id=MANAGER_ID,
        text=f"üî• –ù–æ–≤—ã–π –ª–∏–¥ –∏–∑ –±–æ—Ç–∞:\n\nüë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {code}"
    )

    await state.finish()
    await call.answer()

@dp.callback_query_handler(Text(equals="back_to_menu"))
async def back_to_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=start_kb
    )
    await call.answer()

if __name__ == "__main__":
    init_db()
    executor.start_polling(dp, skip_updates=True)
